<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>书海扬帆</title>
  
  <subtitle>主攻IT，兼修数理，酷爱文史，沉迷学习。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ljhedp.github.io/"/>
  <updated>2018-11-11T13:55:16.718Z</updated>
  <id>https://ljhedp.github.io/</id>
  
  <author>
    <name>书海扬帆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>组合趣题-情人节的玫瑰</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E7%BB%84%E5%90%88%E8%B6%A3%E9%A2%98-%E6%83%85%E4%BA%BA%E8%8A%82%E7%9A%84%E7%8E%AB%E7%91%B0/"/>
    <id>https://ljhedp.github.io/2018/11/11/组合趣题-情人节的玫瑰/</id>
    <published>2018-11-11T13:52:46.000Z</published>
    <updated>2018-11-11T13:55:16.718Z</updated>
    
    <content type="html"><![CDATA[<p></p><h2>题目</h2><br>n对夫妇过<strong>情人节</strong>，每一位男士送每一位女士若干朵玫瑰，若一位男士送给别人妻子的花的数量总和≥送给自己妻子的花的数量，那么妻子就会<strong>不高兴</strong>。当他们互相赠送完毕后发现，对于任意一位妻子，她均可以把所有的男士分为两组，使得每组男士送给自己的花的数目之和一样多。<p></p><p>求证：<span style="color: #ff0000;"><strong>至少有一位妻子会不高兴</strong></span>。</p><p></p><h2>来源</h2><br>白俄罗斯竞赛题。<p></p><p></p><h2>思路</h2><br>反证法。本题虽然披着组合数学难题的外衣，但本质上是一道代数题。运用数学语言和符号将所有已知条件都表示出来，就能看出端倪。<p></p><p></p><h2>解答</h2><br>将所有男士编号为${a_1},{a_2},{a_3},…,{a_n} $, 所有女士编号为${b_1},{b_2},{b_3},…,{b_n}$.用${A[i][j]} $表示第i位丈夫送给第j位妻子的花的数量。<p></p><p>则本题就是考察一个$n*n$的二维数组。</p><p>反证法，假设没有妻子不高兴，则对于所有的$ j \in \{1,2,…,n\} $, 均有$ A[j][j]&gt;\sum\limits_{i = 1}^n {A[j][i]}-A[j][j]$.</p><p>移项，化简得$A[j][j] &gt; \sum\limits_{i = 1}^n {A[j][i]}​$.</p><p>对于所有的$j \in \{1,2,…,n\}$，均有<script type="math/tex">\sum\limits_{i = 1}^n {A[i][j]} \ge 2A[j][j]</script>.</p><p><script type="math/tex">\therefore 2\sum\limits_{j = 1}^n {A[j][j] > \sum\limits_{i = 1}^n {\sum\limits_{j = 1}^n {A[j][i] = } } } \sum\limits_{i = 1}^n {\sum\limits_{j = 1}^n {A[i][j] \ge } } 2\sum\limits_{j = 1}^n {A[j][j]}</script>.</p><p><span style="color: #ff0000;"><strong>矛盾！</strong></span>证毕！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h2&gt;题目&lt;/h2&gt;&lt;br&gt;n对夫妇过&lt;strong&gt;情人节&lt;/strong&gt;，每一位男士送每一位女士若干朵玫瑰，若一位男士送给别人妻子的花的数量总和≥送给自己妻子的花的数量，那么妻子就会&lt;strong&gt;不高兴&lt;/strong&gt;。当他们互相赠送完毕后发现，对于任意
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="数论" scheme="https://ljhedp.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="组合数学" scheme="https://ljhedp.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>贪心-洛谷P1106-删数问题</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E8%B4%AA%E5%BF%83-%E6%B4%9B%E8%B0%B7P1106-%E5%88%A0%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>https://ljhedp.github.io/2018/11/11/贪心-洛谷P1106-删数问题/</id>
    <published>2018-11-11T13:51:43.000Z</published>
    <updated>2018-11-11T13:51:54.576Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1106" target="_blank" rel="noopener">题目传送门</a></p><p>这道题目是一道非常经典的贪心问题。由于n的位数非常多，而且删除操作改变的是每个数位，所以我们非常自然地能想到用字符串来存储n。<br>接下来我们来思考贪心策略， 首先我思考的是，将字符串中最大的s个数字都删去，但是我发现我是错的。比如36251314这个字符串，要删去2位的话，就不应该删6和4，而应该删6和2。综上所述，我们可以得出本题目的贪心策略：从高位到低位搜索，如果各位数字均递增，则删去最后一个数字，否则删除第一个递减区间的首字符。举个栗子，如果1234567要删除2位的话，我们必定是删除6和7，而3654321如果要删除2位的话，我们则要选择删去6和5.<br>重复以上过程s次，剩下的数字串便是问题的解了。<br>这里再谈一下0的问题，由于前导0不能输出<del>（你见过有人把123写成0123或是000123嘛）</del>所以我们再来一个布尔变量flag来记录每一位是否为0.但是这个时候还出现了一个问题，就是这个字符串被删除完了，只剩下一个0怎么办？比如说样例7，10删除1位之后，我们还是必须要输出0的。因此我们再建立一个cnt变量来存储输出的数字的个数。如果个数为0，那么说明整个字符串均为0，此时我们还需要输出一个0.<br>话说了这么多，你应该能看懂了吧，下面分享下代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> n[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">int</span> s,len;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;n);<span class="comment">//读入数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">500</span>;i++) <span class="keyword">if</span>(n[i]!=<span class="string">'\0'</span>) len++;<span class="comment">//计算字符串长度</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;<span class="comment">//读入数据，我们一共要删除s个字符</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>;j++)<span class="comment">//从字符串的第一个字符开始查找，len是字符串的长度</span></span><br><span class="line">            <span class="keyword">if</span>(n[j]&gt;n[j+<span class="number">1</span>])&#123;<span class="comment">//如果找到了递减区间</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;len<span class="number">-1</span>;k++) n[k]=n[k+<span class="number">1</span>];</span><br><span class="line">                <span class="comment">//那么就删除字符串n的第j个字符，后面字符往前调整。</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;    </span><br><span class="line">            len--;<span class="comment">//由于已经删除了一个元素，所以长度-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt;<span class="comment">//记录被输出字符的个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n[i]!=<span class="string">'0'</span>) flag=<span class="literal">true</span>;<span class="comment">//如果不是0，则说明可以输出，flag=1</span></span><br><span class="line">            <span class="keyword">if</span>(flag) <span class="built_in">cout</span>&lt;&lt;n[i],cnt++;<span class="comment">//如果可以输出那就输出，同时个数增加1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;<span class="comment">//如果啥都没输出，就说明整个字符串都是0，此事我们还要输出一个0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//愉快地结束了</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1106&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这道题目是一道非常经典的贪心问题。由于n的位数非常多，而且删除操作改变
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="模板" scheme="https://ljhedp.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="精品" scheme="https://ljhedp.github.io/tags/%E7%B2%BE%E5%93%81/"/>
    
      <category term="贪心" scheme="https://ljhedp.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>NOIP2005-采药</title>
    <link href="https://ljhedp.github.io/2018/11/11/NOIP2005-%E9%87%87%E8%8D%AF/"/>
    <id>https://ljhedp.github.io/2018/11/11/NOIP2005-采药/</id>
    <published>2018-11-11T13:50:00.000Z</published>
    <updated>2018-11-11T13:50:12.941Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> d[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> t[maxn],w[maxn];</span><br><span class="line"><span class="keyword">int</span> time1,m,ans=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;time1,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t[i],&amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=time1;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            d[i][j]=d[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(t[i]&lt;=j)</span><br><span class="line">                d[i][j]=max(d[i][j],d[i<span class="number">-1</span>][j-t[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=time1;i++) </span><br><span class="line">        ans=max(ans,d[m][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="dp" scheme="https://ljhedp.github.io/tags/dp/"/>
    
      <category term="背包问题" scheme="https://ljhedp.github.io/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>转载-不用显式高精度计算2的幂</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E8%BD%AC%E8%BD%BD-%E4%B8%8D%E7%94%A8%E6%98%BE%E5%BC%8F%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%972%E7%9A%84%E5%B9%82/"/>
    <id>https://ljhedp.github.io/2018/11/11/转载-不用显式高精度计算2的幂/</id>
    <published>2018-11-11T13:44:53.000Z</published>
    <updated>2018-11-11T13:47:53.591Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote>来自某位巨佬在WC上学的技巧。</blockquote></p><p></p><h2>题目</h2><br>给定正整数$n(n&lt;=15000)$，计算$2^n-1$的值。<p></p><p></p><h2>解题思路</h2><br>这道题目是非常典型的高精度，但是数据范围乍一看有些吓人。普通的高精如果不慎，甚至会超时。<p></p><p></p><h2>适用范围</h2><br>仅适用于计算$2^n$的精确值，且 $|n|&lt;=2^{14}$<p></p><p>浮点数能精确表示$2^n$，因为大部分浮点数内部都以2为底数，n的范围与浮点数类型有关。常用浮点数最高精度的long double也只有15位阶码。</p><p></p><h2>使用方法</h2><br>直接使用pow函数即可计算。<p></p><p></p><h3>C++</h3><br>字符串流输出<p></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cout</span>.precision(n&gt;<span class="number">0</span>?<span class="number">0</span>:-n);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;<span class="built_in">pow</span>(<span class="number">2.0L</span>,n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>printf输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.*Lf\n"</span>,n&gt;<span class="number">0</span>?<span class="number">0</span>:-n,powl(<span class="number">2.0L</span>,n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>浮点数常量的L后缀表示long double</em></p><p></p><h3>Windows下scanf/printf</h3><br>Windows下通常使用MinGW，部分版本可能无法正常使用<code>%lld</code>或<code>%Lf</code>。<p></p><p>解决方法非常简单，在程序首部加入：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __USE_MINGW_ANSI_STDIO 1</span></span><br></pre></td></tr></table></figure></p><p></p><h2>题解</h2><br>由于n的范围刚好可以使用上述技巧，而且-1也很方便，直接在最低位-1即可，显然不会退位。<p></p><p></p><h3>程序清单</h3><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss.precision(<span class="number">0</span>);</span><br><span class="line">    ss&lt;&lt;fixed&lt;&lt;<span class="built_in">pow</span>(<span class="number">2.0L</span>,n);</span><br><span class="line">    <span class="built_in">string</span> s=ss.str();</span><br><span class="line">    s[s.length()<span class="number">-1</span>]--;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这里利用了字符串流，当然用<code>sprintf</code>也完全没有问题。实测比手写高精度快很多，代码也很简单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;blockquote&gt;来自某位巨佬在WC上学的技巧。&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;题目&lt;/h2&gt;&lt;br&gt;给定正整数$n(n&amp;lt;=15000)$，计算$2^n-1$的值。&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;解题思路&lt;/h2&gt;&lt;br&gt;这道题目
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="学习笔记" scheme="https://ljhedp.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="模板" scheme="https://ljhedp.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="数论" scheme="https://ljhedp.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>蔡勒公式算日期</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E8%94%A1%E5%8B%92%E5%85%AC%E5%BC%8F%E7%AE%97%E6%97%A5%E6%9C%9F/"/>
    <id>https://ljhedp.github.io/2018/11/11/蔡勒公式算日期/</id>
    <published>2018-11-11T13:40:43.000Z</published>
    <updated>2018-11-11T13:43:46.415Z</updated>
    
    <content type="html"><![CDATA[<p>原网页：<a href="https://www.cnblogs.com/igaoshang/articles/Zeller.html" target="_blank" rel="noopener">https://www.cnblogs.com/igaoshang/articles/Zeller.html</a></p><p>历史上的某一天是星期几？未来的某一天是星期几？关于这个问题，有很多计算公式，其中最著名的是蔡勒 <span class="latex">(Zeller)公式：</span></p><p>$W = \left( {\left[ {\frac{C}{4}} \right] - 2C + Y + \left[ {\frac{Y}{4}} \right] + \left[ {13 \times \fracNaN{5}} \right] + D - 1} \right){\rm{\% }}7$$.</p><p>公式都是基于公历的置闰规则来考虑。 公式中的符号含义如下：</p><blockquote><p>• W：星期</p><p>• C：世纪数减一 (年份前两位数)</p><p>• Y：年(年份后两位数)</p><p>• M：月(M的取值范围为3至14，即在蔡勒公式中，某年的1、2月要看作上一年的13、14月来计算，比如2003 年1月1日要看作 2002 年的13月1日来计算)</p><p>• D ：日</p><p>• []：称作高斯符号，代表取整，即只要整数部份</p><p>• mod：同余‎这里代表括号里的答案除以7后的余数</p></blockquote><p>算出来的除以7，余数是几就是星期几。如果余数是0，则为星期日。</p><p>不过，以上的公式都只适合于1582年(我国明朝万历十年)10 月15日之后的情形。罗马教皇格里高利十三世在1582年组织了一批天文学家，根据哥白尼日心说计算出来的数据，对儒略历作了修改。将1582年10月5 日到14日之间的10天宣布撤销，即10月4日之后为10月15日。若要计算的日期是在1582年10月4日或之前，其公式为 </p><script type="math/tex; mode=display">W=Y+[Y/4]+[C/4]-2C+[13×(M+1)/5]+D+3.</script><p> 以2049年10月1日<span class="latex">(100周年国庆)为例，用蔡勒(Zeller)公式进行计算，过程如下：</span></p><p>$W=Y+[Y/4]+[C/4]-2C+[26×(M+1)/10]+D-1$</p><p>$=49+[49/4]+[20/4]-2×20+[26×(10+1)/10]+1-1<br>=49+[12.25]+5-40+[28.6]$</p><p>$=49+12+5-40+28$</p><p>$=54.$</p><p>54除以7余5， 即2049年10月1日（100周年国庆）是星期5。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原网页：&lt;a href=&quot;https://www.cnblogs.com/igaoshang/articles/Zeller.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/igaoshang/art
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="数学竞赛" scheme="https://ljhedp.github.io/tags/%E6%95%B0%E5%AD%A6%E7%AB%9E%E8%B5%9B/"/>
    
      <category term="数论" scheme="https://ljhedp.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>RMQ-洛谷P1816-忠诚</title>
    <link href="https://ljhedp.github.io/2018/11/11/RMQ-%E6%B4%9B%E8%B0%B7P1816-%E5%BF%A0%E8%AF%9A/"/>
    <id>https://ljhedp.github.io/2018/11/11/RMQ-洛谷P1816-忠诚/</id>
    <published>2018-11-11T13:39:55.000Z</published>
    <updated>2018-11-11T13:40:12.471Z</updated>
    
    <content type="html"><![CDATA[<p>谁说暴力铁定拿低分！！！</p><p>本题数据非常弱，大模拟90分，除了最后一个点TLE了，其他都能很快AC，如果真是到了赛场上，没时间做这个题或者觉得代码难度较高的话，暴力的解法不妨一试！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[<span class="number">200100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">int</span> ans=a[x];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=x;j&lt;=y;j++)   ans=min(a[j],ans);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>下面放一下ST表实现的正解，这是很标准的RMQ问题~<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> st[<span class="number">100010</span>][<span class="number">22</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">st_init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;<span class="number">1</span>&lt;&lt;j&lt;=m;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=m;i++)</span><br><span class="line">st[i][j]=min(st[i][j<span class="number">-1</span>],st[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">st_ask</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=log2(r-l+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> min(st[l][k],st[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;st[i][<span class="number">0</span>]);</span><br><span class="line">st_init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,st_ask(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;谁说暴力铁定拿低分！！！&lt;/p&gt;
&lt;p&gt;本题数据非常弱，大模拟90分，除了最后一个点TLE了，其他都能很快AC，如果真是到了赛场上，没时间做这个题或者觉得代码难度较高的话，暴力的解法不妨一试！&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="ST表" scheme="https://ljhedp.github.io/tags/ST%E8%A1%A8/"/>
    
      <category term="模拟" scheme="https://ljhedp.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>模板-01背包</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E6%A8%A1%E6%9D%BF-01%E8%83%8C%E5%8C%85/"/>
    <id>https://ljhedp.github.io/2018/11/11/模板-01背包/</id>
    <published>2018-11-11T13:38:41.000Z</published>
    <updated>2018-11-11T13:39:05.446Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAXC=10001;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int C[MAXC],W[MAXC];</span><br><span class="line">    int f[MAXC];</span><br><span class="line">    int n,V;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;V;</span><br><span class="line">    memset(f,0,sizeof(f));</span><br><span class="line">    for(int i = 1; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;C[i]&gt;&gt;W[i];</span><br><span class="line">        for(int j=V;j&gt;=C[i];j--)</span><br><span class="line">        &#123;</span><br><span class="line">                if(f[j]&lt;f[j-C[i]]+W[i])</span><br><span class="line">                f[j]=f[j-C[i]]+W[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[V];</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="dp" scheme="https://ljhedp.github.io/tags/dp/"/>
    
      <category term="模板" scheme="https://ljhedp.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="背包问题" scheme="https://ljhedp.github.io/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
      <category term="01背包" scheme="https://ljhedp.github.io/tags/01%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>贪心-NOIP2012-国王游戏</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E8%B4%AA%E5%BF%83-NOIP2012-%E5%9B%BD%E7%8E%8B%E6%B8%B8%E6%88%8F/"/>
    <id>https://ljhedp.github.io/2018/11/11/贪心-NOIP2012-国王游戏/</id>
    <published>2018-11-11T13:36:57.000Z</published>
    <updated>2018-11-11T13:37:39.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="50pts"><a href="#50pts" class="headerlink" title="50pts"></a>50pts</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,a1,b1,ans,wealth;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,b,w;</span><br><span class="line">&#125;c[<span class="number">10010</span>]; </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.a*x.b==y.a*y.b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> x.a*x.b&gt;y.a*y.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a1&gt;&gt;b1;</span><br><span class="line">wealth=a1;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">cin</span>&gt;&gt;c[i].a&gt;&gt;c[i].b;</span><br><span class="line">sort(c,c+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--) wealth*=c[i].a;</span><br><span class="line">wealth/=c[<span class="number">0</span>].b;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;wealth&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="100pts"><a href="#100pts" class="headerlink" title="100pts"></a>100pts</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">a</span>&#123;</span></span><br><span class="line">       <span class="keyword">int</span> lt,rt;</span><br><span class="line">       &#125;a[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;,fs[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;,k[<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">       <span class="built_in">cin</span>&gt;&gt;a[i].lt&gt;&gt;a[i].rt;</span><br><span class="line">       k[i]=a[i].rt*a[i].lt;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++) &#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n-i; j++)&#123; </span><br><span class="line">    <span class="keyword">if</span> (k[j]&gt;k[j+<span class="number">1</span>])  </span><br><span class="line">    &#123; </span><br><span class="line">    <span class="keyword">int</span> t=a[j].lt;a[j].lt=a[j+<span class="number">1</span>].lt; a[j+<span class="number">1</span>].lt=t; </span><br><span class="line">    t=a[j].rt; a[j].rt=a[j+<span class="number">1</span>].rt; a[j+<span class="number">1</span>].rt=t; </span><br><span class="line">    t=k[j];k[j]=k[j+<span class="number">1</span>];k[j+<span class="number">1</span>]=t; </span><br><span class="line">    &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    f[<span class="number">0</span>]=a[<span class="number">0</span>].lt;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> s=<span class="number">0</span>,t=a[<span class="number">0</span>].lt;</span><br><span class="line">    <span class="keyword">int</span> si=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t/a[i].rt&gt;s)</span><br><span class="line">            &#123;</span><br><span class="line">            s=t/a[i].rt;</span><br><span class="line">            m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">999</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                m=<span class="number">10000</span>*m+f[j];</span><br><span class="line">                fs[j]=m/a[i].rt;</span><br><span class="line">                m%=a[i].rt;</span><br><span class="line">                &#125;</span><br><span class="line">                si=i;</span><br><span class="line">        &#125;</span><br><span class="line">        t*=a[i].lt; </span><br><span class="line">        m=<span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">999</span>;j++) &#123; </span><br><span class="line">         m+=f[j]*a[i].lt; </span><br><span class="line">         f[j]=m%<span class="number">10000</span>; </span><br><span class="line">         m/=<span class="number">10000</span>; </span><br><span class="line">         &#125; </span><br><span class="line">         &#125;</span><br><span class="line">         m=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">999</span>; j&gt;=<span class="number">0</span>; j--) &#123; </span><br><span class="line">         <span class="keyword">if</span> (m==<span class="number">1</span>) </span><br><span class="line">         &#123; </span><br><span class="line">          <span class="keyword">if</span> (fs[j]&lt;<span class="number">10</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"000"</span>; </span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (fs[j]&lt;<span class="number">100</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"00"</span>; </span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (fs[j]&lt;<span class="number">1000</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>; </span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;fs[j]; </span><br><span class="line">         &#125; </span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(fs[j]&gt;<span class="number">0</span>)&#123;<span class="built_in">cout</span>&lt;&lt;fs[j];</span><br><span class="line">         m=<span class="number">1</span>;</span><br><span class="line">         &#125; </span><br><span class="line">         &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;50pts&quot;&gt;&lt;a href=&quot;#50pts&quot; class=&quot;headerlink&quot; title=&quot;50pts&quot;&gt;&lt;/a&gt;50pts&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="模拟" scheme="https://ljhedp.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="贪心" scheme="https://ljhedp.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>小学奥数-NOIP2013-转圈游戏</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E5%B0%8F%E5%AD%A6%E5%A5%A5%E6%95%B0-NOIP2013-%E8%BD%AC%E5%9C%88%E6%B8%B8%E6%88%8F/"/>
    <id>https://ljhedp.github.io/2018/11/11/小学奥数-NOIP2013-转圈游戏/</id>
    <published>2018-11-11T13:36:10.000Z</published>
    <updated>2018-11-11T13:36:22.006Z</updated>
    
    <content type="html"><![CDATA[<p>提高组的数论题。</p><p>这道题目我自行思考并在十分钟内写出了正解，一种成就感油然而生。思路就是GCD/LCM再加上快速幂，反复根据同余取模。</p><p>学小学奥数的时候做这类周期问题做多了。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,m,k,x; </span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">lcm</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll now=gcd(a,b);</span><br><span class="line">    <span class="keyword">return</span> (a/now)*(b/now)*now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qmi</span><span class="params">(ll a,ll n,ll p)</span></span>&#123;</span><br><span class="line">    ll m1=a,m2=n,ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>) ans=(ans*a)%p;</span><br><span class="line">        a=(a*a)%p;</span><br><span class="line">        n/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;x;</span><br><span class="line">    k=qmi(<span class="number">10</span>,k,lcm(n,m));</span><br><span class="line">    k=(k*m)%n; </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(x+k)%n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;提高组的数论题。&lt;/p&gt;
&lt;p&gt;这道题目我自行思考并在十分钟内写出了正解，一种成就感油然而生。思路就是GCD/LCM再加上快速幂，反复根据同余取模。&lt;/p&gt;
&lt;p&gt;学小学奥数的时候做这类周期问题做多了。。。&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="数论" scheme="https://ljhedp.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="快速幂" scheme="https://ljhedp.github.io/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>模板-线性逆元</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E6%A8%A1%E6%9D%BF-%E7%BA%BF%E6%80%A7%E9%80%86%E5%85%83/"/>
    <id>https://ljhedp.github.io/2018/11/11/模板-线性逆元/</id>
    <published>2018-11-11T13:35:13.000Z</published>
    <updated>2018-11-11T13:35:37.568Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define N 3000010</span><br><span class="line">typedef long long ll;</span><br><span class="line">using namespace std;</span><br><span class="line">int inv[N],n,p;</span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;p;</span><br><span class="line">inv[1]=1;</span><br><span class="line">puts(&quot;1&quot;);</span><br><span class="line">    for(int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">        inv[i]=(ll)(p-p/i)*inv[p%i]%p;</span><br><span class="line">        //注意计算时要强制转换，防止溢出</span><br><span class="line">        printf(&quot;%d\n&quot;,inv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="数论" scheme="https://ljhedp.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="逆元" scheme="https://ljhedp.github.io/tags/%E9%80%86%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>模板-Manacher（马拉车）算法</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E6%A8%A1%E6%9D%BF-Manacher%EF%BC%88%E9%A9%AC%E6%8B%89%E8%BD%A6%EF%BC%89%E7%AE%97%E6%B3%95/"/>
    <id>https://ljhedp.github.io/2018/11/11/模板-Manacher（马拉车）算法/</id>
    <published>2018-11-11T13:34:33.000Z</published>
    <updated>2018-11-11T13:34:49.412Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Luogu P3805</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">11000110</span>],s2[<span class="number">33000300</span>];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">33000300</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">s2[<span class="number">0</span>]=<span class="string">'%'</span>;</span><br><span class="line">s2[<span class="number">1</span>]=<span class="string">'#'</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">s2[j++]=s[i];</span><br><span class="line">s2[j++]=<span class="string">'#'</span>;</span><br><span class="line">&#125;</span><br><span class="line">s2[j]=<span class="string">'*'</span>;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">manacher</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=init();</span><br><span class="line"><span class="keyword">int</span> maxLen=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> id,mx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;mx) p[i]=min(p[<span class="number">2</span>*id-i],mx-i);</span><br><span class="line"><span class="keyword">else</span> p[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(s2[i-p[i]]==s2[i+p[i]]) p[i]++;</span><br><span class="line"><span class="keyword">if</span>(mx&lt;i+p[i]) id=i,mx=i+p[i];</span><br><span class="line">maxLen=max(maxLen,p[i]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">gets(s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,manacher());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="字符串" scheme="https://ljhedp.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="模板" scheme="https://ljhedp.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="Manacher" scheme="https://ljhedp.github.io/tags/Manacher/"/>
    
      <category term="马拉车" scheme="https://ljhedp.github.io/tags/%E9%A9%AC%E6%8B%89%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>图论入门-利用Prim或Kruskal算法求解最小生成树问题</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E5%9B%BE%E8%AE%BA%E5%85%A5%E9%97%A8-%E5%88%A9%E7%94%A8Prim%E6%88%96Kruskal%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%97%AE%E9%A2%98/"/>
    <id>https://ljhedp.github.io/2018/11/11/图论入门-利用Prim或Kruskal算法求解最小生成树问题/</id>
    <published>2018-11-11T13:32:23.000Z</published>
    <updated>2018-11-11T13:33:53.999Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote>学了半天，吭哧吭哧的，终于学到图论啦。。。</blockquote></p><p>本篇文章仅供个人复习，因此以自己理解为首要目标，新人不懂勿喷，感谢。&lt;/blockquote&gt;</p><p></p><h2>一、引言</h2><br>图论是组合数学中的一个分支，是组合数学中一颗璀璨的明珠。无论是在数学研究和计算机科学中都有着广泛的应用。图这个东西，说简单不简单，说难也确实不难。虽然有些知识可能有些晦涩，但只要理解透彻，搞清算法的详细意义，就能茅塞顿开。<p></p><p></p><h2>二、图的基本概念</h2><br>一般的算法书以及老师都会介绍。如果实在不懂，买本书，或者学会善用搜索引擎。<p></p><p><strong>基本概念：</strong>无向图、有向图、完全图、连通图、稠密图、稀疏图、边权、权值、连通分量等</p><p></p><h2>三、图的存储</h2><br>对于图论知识的理解，一定是一个从具体到抽象的过程。如果真的理解不了，就把图画出来吧。<p></p><p>比如我们考察下面这个无向图（用什么软件画好呢？想了半天决定用OneNote）：</p><p><img class="aligncenter size-full wp-image-1405" src="https://cdn.ljhedp.cn/site-file/2018/03/graph.png" alt="" width="477" height="273"></p><p>图有邻接矩阵和邻接表两种存储方法。<br>邻接矩阵就是考察每两点连线，然后运用二维数组存储这个连线的边权。比如上图中1号点到2号点连线的边权是10，则我们的二维数组a[1][2]=10. 以此类推。</p><p>邻接表的特点则是省空间，用链表存储节点之间的关系。</p><p></p><h2>四、Prim算法求解最小生成树</h2><br><strong>核心：</strong>建立在邻接表的基础之上，然后……其实就是暴力啦<p></p><p><strong>朴素实现：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INT_MAX 1000000000 <span class="comment">//开1&lt;&lt;30也可 </span></span></span><br><span class="line"><span class="keyword">int</span> n,m,cnt,dis[<span class="number">100100</span>],ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line">node *next;</span><br><span class="line"><span class="comment">//链表 </span></span><br><span class="line">&#125;pool[<span class="number">400000</span>],*e[<span class="number">100010</span>]; <span class="comment">//内存池 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">node *p=&amp;pool[++cnt],*q=&amp;pool[++cnt]; <span class="comment">//p: dis(u,v) q:dis(v,u)</span></span><br><span class="line">p-&gt;v=v,p-&gt;d=d,p-&gt;next=e[u],e[u]=p; <span class="comment">//第一个d是结构体中的d，第二个是形参 </span></span><br><span class="line">q-&gt;v=u,q-&gt;d=d,q-&gt;next=e[v],e[v]=q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> u,v,d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;d);</span><br><span class="line">addedge(u,v,d);</span><br><span class="line">&#125;</span><br><span class="line">dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) dis[i]=INT_MAX;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">1</span>,min_d,min_p; <span class="comment">//md表示最小距离 mp表示最小的点的编号 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(node *p=e[k];p;p=p-&gt;next) <span class="comment">//找链 p;表示p!=NULL </span></span><br><span class="line"><span class="keyword">if</span>(dis[p-&gt;v] &gt; p-&gt;d) dis[p-&gt;v]=p-&gt;d;</span><br><span class="line"><span class="comment">//找最小值</span></span><br><span class="line">min_d=INT_MAX;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span>(dis[j] &amp;&amp; dis[j]&lt;min_d)</span><br><span class="line">    min_d=dis[j],min_p=j;</span><br><span class="line">ans+=dis[min_p];</span><br><span class="line">dis[k=min_p]=<span class="number">0</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>优化：</strong></p><p>在找最小值的时候，能不能再降一些复杂度呢？由此我们想到了堆结构（跟线段树非常非常相似）。下面是优化后的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;climits&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">ll n,m,cnt,dis[500500],ans,flag[500500]; //flag[i]=1表示已经找过了 =0表示尚未找过 </span><br><span class="line">struct node&#123;</span><br><span class="line">ll d;</span><br><span class="line">ll v;</span><br><span class="line">node *next;</span><br><span class="line">//链表 </span><br><span class="line">&#125;pool[500500],*e[500500]; //内存池 </span><br><span class="line">void addedge(ll u,ll v,ll d)&#123;</span><br><span class="line">node *p=&amp;pool[++cnt],*q=&amp;pool[++cnt]; //p: dis(u,v) q:dis(v,u)</span><br><span class="line">p-&gt;v=v,p-&gt;d=d,p-&gt;next=e[u],e[u]=p; //第一个d是结构体中的d，第二个是形参 </span><br><span class="line">q-&gt;v=u,q-&gt;d=d,q-&gt;next=e[v],e[v]=q;</span><br><span class="line">&#125;</span><br><span class="line">struct heap&#123;</span><br><span class="line">ll d,p;</span><br><span class="line">&#125;h[500500];</span><br><span class="line">ll L=1;</span><br><span class="line">void change(ll i,ll d)&#123; //第i个点的值修改为d </span><br><span class="line">h[i+L-1].d=d;</span><br><span class="line">for(ll j=(i+L-1)/2;j;j/=2)</span><br><span class="line">if(h[2*j].d&lt;h[2*j+1].d) h[j]=h[2*j];</span><br><span class="line">else h[j]=h[2*j+1]; </span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">ll u,v,d;</span><br><span class="line">for(ll i=1;i&lt;=m;i++)&#123;</span><br><span class="line">scanf(&quot;%d%d%d&quot;,&amp;u,&amp;v,&amp;d);</span><br><span class="line">addedge(u,v,d);</span><br><span class="line">&#125;</span><br><span class="line">dis[1]=0;</span><br><span class="line">for(ll i=2;i&lt;=n;i++) dis[i]=ll_MAX;</span><br><span class="line">//建立堆结构 </span><br><span class="line">while(L&lt;n) L*=2;</span><br><span class="line">for(ll i=L;i&lt;=L+n-1;i++) h[i].d=dis[i-L+1],h[i].p=i-L+1;</span><br><span class="line">for(ll i=L+n;i&lt;2*L;i++) h[i].d=ll_MAX;</span><br><span class="line">for(ll i=L-1;i&gt;0;i--)&#123;</span><br><span class="line">if(h[2*i].d&lt;h[2*i+1].d) h[i]=h[2*i];</span><br><span class="line">else h[i]=h[2*i+1]; </span><br><span class="line">//结构体中的每一个元素都赋值 </span><br><span class="line">&#125;</span><br><span class="line">//printf(&quot;%d %d\n&quot;,h[1].p,h[1].d);</span><br><span class="line">ll k;</span><br><span class="line">for(ll i=1;i&lt;=n;i++)&#123;</span><br><span class="line">k=h[1].p; //k=最小值的编号</span><br><span class="line">ans+=dis[k];</span><br><span class="line">flag[k]=1;</span><br><span class="line">//下面改结构体 </span><br><span class="line">change(k,ll_MAX);</span><br><span class="line">for(node *p=e[k];p;p=p-&gt;next)</span><br><span class="line">if(flag[p-&gt;v]==0 &amp;&amp; dis[p-&gt;v]&gt;p-&gt;d)&#123;</span><br><span class="line">dis[p-&gt;v]=p-&gt;d;</span><br><span class="line">change(p-&gt;v,p-&gt;d); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;,ans);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p></p><h2>五、Kruskal算法求解最小生成树</h2><br><strong>核心：</strong>在邻接表的基础之上，跑并查集。<p></p><p>下面看一下代码实现。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,p[<span class="number">100100</span>],ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,d;</span><br><span class="line">&#125;e[<span class="number">300100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> p[i]=find(p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">p[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.d&lt;y.d; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;e[i].v,&amp;e[i].u,&amp;e[i].d);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">if</span>(find(e[i].u)!=find(e[i].v))&#123;</span><br><span class="line">ans+=e[i].d;</span><br><span class="line">Union(find(e[i].u) , find(e[i].v));</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p></p><h2>六、结语</h2><br>由于最小生成树是一类题目，因此AC掉模板题至关重要。<p></p><p>Luogu的数据好像很水的样子，暴力都可以轻松过掉。</p><p>不过LOJ好像就不行了，Luogu AC代码交上去只得10分。</p><p><a href="https://www.luogu.org/problemnew/show/P3366" target="_blank" rel="noopener">Luogu题目地址（点我点我）</a></p><p><a href="https://loj.ac/problem/123" target="_blank" rel="noopener">LOJ题目地址（点我点我）</a></p><p>总之就是学习完新知识后要及时复习总结，上课讲的理论下课后一定要手动实现，重要的部分尤其是解题思路、算法复杂度和证明方法一定要记下来。这样可以避免出现遗忘现象。</p><blockquote><p>“同学，这个学过吗？”<br>“学过啊！”</p><p>“来写一个我看看。”</p><p>“我……我不会啊！怎么写来着。。。”</p></blockquote><p>要上考场了还像上面这样，就彻底凉了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;blockquote&gt;学了半天，吭哧吭哧的，终于学到图论啦。。。&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;本篇文章仅供个人复习，因此以自己理解为首要目标，新人不懂勿喷，感谢。&amp;lt;/blockquote&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;一、引言&lt;/h2&gt;&lt;br&gt;图
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="图论" scheme="https://ljhedp.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最小生成树" scheme="https://ljhedp.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="Prim" scheme="https://ljhedp.github.io/tags/Prim/"/>
    
      <category term="Kruscal" scheme="https://ljhedp.github.io/tags/Kruscal/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法与后缀数组的基本知识</title>
    <link href="https://ljhedp.github.io/2018/11/11/KMP%E7%AE%97%E6%B3%95%E4%B8%8E%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>https://ljhedp.github.io/2018/11/11/KMP算法与后缀数组的基本知识/</id>
    <published>2018-11-11T13:30:16.000Z</published>
    <updated>2018-11-11T13:30:35.641Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下新学期的笔记。</p><p>KMP算法和后缀数组算法都是用于字符串匹配。即：给定两个字符串，寻找其中一个字符串是否包含另一个字符串，如果包含，返回包含的起始位置。</p><p>我们可以利用KMP/后缀数组构建一个简单的搜索引擎。</p><ul>     <li><a href="http://blog.csdn.net/starstar1992/article/details/54913261" target="_blank" rel="noopener">KMP算法讲解</a></li>     <li><a href="https://cdn.ljhedp.cn/site-file/2018/03/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E2%80%94%E2%80%94%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%89%E5%8A%9B%E5%B7%A5%E5%85%B7.pdf" target="_blank" rel="noopener">后缀数组的基本概念及应用（国家集训队论文）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理一下新学期的笔记。&lt;/p&gt;
&lt;p&gt;KMP算法和后缀数组算法都是用于字符串匹配。即：给定两个字符串，寻找其中一个字符串是否包含另一个字符串，如果包含，返回包含的起始位置。&lt;/p&gt;
&lt;p&gt;我们可以利用KMP/后缀数组构建一个简单的搜索引擎。&lt;/p&gt;
&lt;ul&gt;
     &lt;l
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="学习笔记" scheme="https://ljhedp.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="KMP" scheme="https://ljhedp.github.io/tags/KMP/"/>
    
      <category term="后缀数组" scheme="https://ljhedp.github.io/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
      <category term="字符串" scheme="https://ljhedp.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>差分约束-洛谷P1993-小K的农场</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F-%E6%B4%9B%E8%B0%B7P1993-%E5%B0%8FK%E7%9A%84%E5%86%9C%E5%9C%BA/"/>
    <id>https://ljhedp.github.io/2018/11/11/差分约束-洛谷P1993-小K的农场/</id>
    <published>2018-11-11T13:29:03.000Z</published>
    <updated>2018-11-11T13:29:20.858Z</updated>
    
    <content type="html"><![CDATA[<p>本题运用图论中的差分约束算法即可解决。差分约束需要连一些表示变量间大小关系的边，然后运用SPFA算法求解。</p><p>我们把顶点0作为“超级源点”，在主函数的开始首先执行下面一段代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) addEdge(n+<span class="number">1</span>,i,<span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>之后学网络流等知识还会遇到“超级汇点”。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100100</span>,maxm=<span class="number">500500</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,c;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;*h[maxn],pool[maxm];</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="keyword">int</span> q[maxn],head=<span class="number">1</span>,tail=<span class="number">1</span>,vis[maxn],dis[maxm];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *p=&amp;pool[++tot];</span><br><span class="line">    p-&gt;v=v; p-&gt;c=c; p-&gt;next=h[u]; h[u]=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,k,root; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    root=n+<span class="number">1</span>;</span><br><span class="line">    q[tail]=root;</span><br><span class="line">    tail++;</span><br><span class="line">    vis[root]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++) dis[i]=<span class="number">0x3f</span>;</span><br><span class="line">    dis[root]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(head&lt;tail)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(tail&gt;maxn) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        k=q[head];</span><br><span class="line">        <span class="keyword">for</span>(Node *p=h[k];p;p=p-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[p-&gt;v]&gt;dis[k]+p-&gt;c)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[p-&gt;v]=dis[k]+p-&gt;c;</span><br><span class="line">                <span class="keyword">if</span>(vis[p-&gt;v]==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    q[tail]=p-&gt;v;</span><br><span class="line">                    tail++;</span><br><span class="line">                    vis[p-&gt;v]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[q[head]]=<span class="number">0</span>;</span><br><span class="line">        head++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) addEdge(n+<span class="number">1</span>,i,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,c,res;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;res);</span><br><span class="line">        <span class="keyword">if</span>(res==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;c);</span><br><span class="line">            addEdge(u,v,c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(res==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;c);</span><br><span class="line">            addEdge(v,u,-c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(res==<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            addEdge(u,v,<span class="number">0</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(spfa()==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本题运用图论中的差分约束算法即可解决。差分约束需要连一些表示变量间大小关系的边，然后运用SPFA算法求解。&lt;/p&gt;
&lt;p&gt;我们把顶点0作为“超级源点”，在主函数的开始首先执行下面一段代码。&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="图论" scheme="https://ljhedp.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="https://ljhedp.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="差分约束" scheme="https://ljhedp.github.io/tags/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>最短路-洛谷P1339-USACO-热浪</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E6%9C%80%E7%9F%AD%E8%B7%AF-%E6%B4%9B%E8%B0%B7P1339-USACO-%E7%83%AD%E6%B5%AA/"/>
    <id>https://ljhedp.github.io/2018/11/11/最短路-洛谷P1339-USACO-热浪/</id>
    <published>2018-11-11T13:27:52.000Z</published>
    <updated>2018-11-11T13:28:09.580Z</updated>
    
    <content type="html"><![CDATA[<p></p><h2>题面</h2><br>德克萨斯纯朴的民眾们这个夏天正在遭受巨大的热浪！！！他们的德克萨斯长角牛吃起来不错，可是他们并不是很擅长生產富含奶油的乳製品。Farmer John此时以先天下之忧而忧，后天下之乐而乐的精神，身先士卒地承担起向德克萨斯运送大量的营养冰凉的牛奶的重任，以减轻德克萨斯人忍受酷暑的痛苦。<p></p><p>FJ已经研究过可以把牛奶从威斯康星运送到德克萨斯州的路线。这些路线包括起始点和终点先一共经过T (1 &lt;= T &lt;= 2,500)个城镇，方便地标号为1到T。除了起点和终点外地每个城镇由两条双向道路连向至少两个其它地城镇。每条道路有一个通过费用（包括油费，过路费等等）。</p><p>给定一个地图，包含C (1 &lt;= C &lt;= 6,200)条直接连接2个城镇的道路。每条道路由道路的起点Rs，终点Re (1 &lt;= Rs &lt;= T; 1 &lt;= Re &lt;= T)，和花费(1 &lt;= Ci &lt;= 1,000)组成。求从起始的城镇Ts (1 &lt;= Ts &lt;= T)到终点的城镇Te(1 &lt;= Te &lt;= T)最小的总费用。</p><p></p><h2><strong>输入格式：</strong></h2><br>第一行: 4个由空格隔开的整数: T, C, Ts, Te<p></p><p>第2到第C+1行: 第i+1行描述第i条道路。有3个由空格隔开的整数: Rs, Re和Ci</p><p></p><h2><strong>输出格式：</strong></h2><br>一个单独的整数表示从Ts到Te的最小总费用。数据保证至少存在一条道路。<p></p><p></p><h2>题目分析</h2><br>求单源最短路径的题目。俗话说得好，“图论一堆套模板”。以前觉得这只是调侃，现在渐渐接触到图论的内容了，感觉此话真的很有理。<p></p><p>求最短路有三种方法：Dijkstra，Floyd和SPFA，这里由于Bellman-Ford算法并不优于SPFA，就不算在里面了。考虑Floyd肯定会超时，Dijkstra又不能解决负权边的问题（尽管根据实际意义，没有那条道路会倒贴给过路人钱财的），果断SPFA。</p><p></p><h2>代码分享</h2><br>SPFA其实就是队列优化的Bellman-Ford算法。这里使用链式前向星来表示图。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">6210</span>,maxm=<span class="number">400010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> v,c;</span><br><span class="line">Node *next;</span><br><span class="line">&#125;*h[maxn],pool[maxm];</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="keyword">int</span> q[maxn],head,tail,vis[maxn],dis[maxm];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *p=&amp;pool[++tot];</span><br><span class="line">p-&gt;v=v; p-&gt;c=c; p-&gt;next=h[u]; h[u]=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i]=<span class="number">2147483647</span>;</span><br><span class="line">vis[s]=<span class="number">1</span>;</span><br><span class="line">q[tail++]=s;</span><br><span class="line">dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(head&lt;tail)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[head++];</span><br><span class="line">vis[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Node *p=h[u];p;p=p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[p-&gt;v]&gt;dis[u]+p-&gt;c)</span><br><span class="line">&#123;</span><br><span class="line">dis[p-&gt;v]=dis[u]+p-&gt;c;</span><br><span class="line"><span class="keyword">if</span>(vis[p-&gt;v]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">q[tail++]=p-&gt;v;</span><br><span class="line">vis[p-&gt;v]=<span class="number">1</span>;</span><br><span class="line">num[p-&gt;v]++;</span><br><span class="line"><span class="keyword">if</span>(num[p-&gt;v]&gt;n) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//存在负权回路</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//不存在负权回路 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Te;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;s,&amp;Te);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;c);</span><br><span class="line">addEdge(u,v,c);</span><br><span class="line">addEdge(v,u,c);</span><br><span class="line">&#125;</span><br><span class="line">spfa(); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[Te]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h2&gt;题面&lt;/h2&gt;&lt;br&gt;德克萨斯纯朴的民眾们这个夏天正在遭受巨大的热浪！！！他们的德克萨斯长角牛吃起来不错，可是他们并不是很擅长生產富含奶油的乳製品。Farmer John此时以先天下之忧而忧，后天下之乐而乐的精神，身先士卒地承担起向德克萨斯运送大量的营养冰凉
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="图论" scheme="https://ljhedp.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="https://ljhedp.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>模板-卢卡斯定理</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E6%A8%A1%E6%9D%BF-%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86/"/>
    <id>https://ljhedp.github.io/2018/11/11/模板-卢卡斯定理/</id>
    <published>2018-11-11T13:25:38.000Z</published>
    <updated>2018-11-11T13:27:12.202Z</updated>
    
    <content type="html"><![CDATA[<p>用于求$\left( {\begin{array}{*{20}{c}}{n + m}\\m\end{array}} \right)\bmod p$, $p$为质数.</p><p>当然也要结合快速幂，不过这里是利用快速幂求逆元的啦~</p><p></p><h2>代码分享</h2><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//Lucas定理</span></span><br><span class="line"><span class="comment">//结合快速幂使用</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m,p,T;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">ll tmp=qpow(x,m&gt;&gt;<span class="number">1</span>);</span><br><span class="line">tmp=(tmp*tmp)%p;</span><br><span class="line"><span class="keyword">if</span>(m%<span class="number">2</span>==<span class="number">1</span>) tmp=(tmp*x)%p;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">ll <span class="title">getc</span><span class="params">(ll n,ll m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m&gt;n-m) m=n-m;</span><br><span class="line">ll s1=<span class="number">1</span>,s2=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">s1=s1*(n-i)%p;</span><br><span class="line">s2=s2*(i+<span class="number">1</span>)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s1*qpow(s2,p<span class="number">-2</span>)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">lucas</span><span class="params">(ll n,ll m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> getc(n%p,m%p)*lucas(n/p,m/p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lucas(n+m,m)); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用于求$\left( {\begin{array}{*{20}{c}}{n + m}\\m\end{array}} \right)\bmod p$, $p$为质数.&lt;/p&gt;
&lt;p&gt;当然也要结合快速幂，不过这里是利用快速幂求逆元的啦~&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;代码分享&lt;
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="组合数学" scheme="https://ljhedp.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="卢卡斯定理" scheme="https://ljhedp.github.io/tags/%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>模板-ST表</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E6%A8%A1%E6%9D%BF-ST%E8%A1%A8/"/>
    <id>https://ljhedp.github.io/2018/11/11/模板-ST表/</id>
    <published>2018-11-11T13:24:43.000Z</published>
    <updated>2018-11-11T13:24:53.234Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100100</span>],logn[<span class="number">100100</span>],st[<span class="number">100100</span>][<span class="number">35</span>],doing[<span class="number">36</span>],n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_st</span><span class="params">()</span></span>&#123;</span><br><span class="line">logn[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">logn[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++) logn[i]=logn[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>,cnt=<span class="number">1</span>;</span><br><span class="line">doing[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(cnt&lt;=n)&#123;</span><br><span class="line">cnt&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">j++;</span><br><span class="line">doing[j]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>,k=i<span class="number">-1</span>;</span><br><span class="line">st[i][<span class="number">0</span>]=a[i];</span><br><span class="line"><span class="keyword">while</span>(k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">j++;</span><br><span class="line">st[i][j]=max(st[i][j<span class="number">-1</span>],st[i-doing[j<span class="number">-1</span>]][j<span class="number">-1</span>]);</span><br><span class="line">k-=doing[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=logn[r-l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> ret=max(st[l+doing[len]<span class="number">-1</span>][len],st[r][len]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">init_st();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">ask(l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="模板" scheme="https://ljhedp.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="ST表" scheme="https://ljhedp.github.io/tags/ST%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>贪心基础-区间选点问题及其变形</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E8%B4%AA%E5%BF%83%E5%9F%BA%E7%A1%80-%E5%8C%BA%E9%97%B4%E9%80%89%E7%82%B9%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E5%8F%98%E5%BD%A2/"/>
    <id>https://ljhedp.github.io/2018/11/11/贪心基础-区间选点问题及其变形/</id>
    <published>2018-11-11T13:23:59.000Z</published>
    <updated>2018-11-11T13:24:16.523Z</updated>
    
    <content type="html"><![CDATA[<p>首先来看一下区间选点问题的模板：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">int</span> e;</span><br><span class="line">&#125;a[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.e&lt;y.e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i].b&gt;&gt;a[i].e;</span><br><span class="line">    sort(a,a+n,cmp);</span><br><span class="line">    <span class="keyword">int</span> flag[n];</span><br><span class="line">    <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(flag[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i].e&gt;=a[j].b &amp;&amp; a[i].e&lt;=a[j].e)</span><br><span class="line">                &#123;</span><br><span class="line">                flag[j]=<span class="number">1</span>; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先来看一下区间选点问题的模板：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="学习笔记" scheme="https://ljhedp.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="贪心" scheme="https://ljhedp.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>逆元-BZOJ2185/洛谷P2155-SDOI2008-沙拉公主的困惑</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E9%80%86%E5%85%83-BZOJ2185-%E6%B4%9B%E8%B0%B7P2155-SDOI2008-%E6%B2%99%E6%8B%89%E5%85%AC%E4%B8%BB%E7%9A%84%E5%9B%B0%E6%83%91/"/>
    <id>https://ljhedp.github.io/2018/11/11/逆元-BZOJ2185-洛谷P2155-SDOI2008-沙拉公主的困惑/</id>
    <published>2018-11-11T13:22:40.000Z</published>
    <updated>2018-11-11T13:22:55.909Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e7</span> + <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> n[MAXN], m[MAXN], T, inv[MAXN], p1[MAXN], p2[MAXN], prime[MAXN], flag[MAXN], o[MAXN];</span><br><span class="line"><span class="keyword">int</span> Max, R;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar(); <span class="keyword">int</span> u = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>)f = <span class="number">-1</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))&#123;u = u * <span class="number">10</span> + ch - <span class="number">48</span>; ch = getchar(); &#125;<span class="keyword">return</span> u * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>)cnt = cnt * x % R;</span><br><span class="line">        x = x * x % R;k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    T = read(); R = read(); inv[<span class="number">1</span>] = <span class="number">1</span>; o[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++) &#123;</span><br><span class="line">        n[i] = read(); m[i] = read();</span><br><span class="line">        Max = max (Max, max (n[i], m[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= Max + <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag[i]) prime[++prime[<span class="number">0</span>]] = i;</span><br><span class="line">        o[i] = <span class="number">1l</span>l * o[i - <span class="number">1</span>] * i % R;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= prime[<span class="number">0</span>] &amp;&amp; prime[j] * i &lt;= Max + <span class="number">10</span>; j++)&#123;</span><br><span class="line">            flag[prime[j] * i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    p1[<span class="number">0</span>] = <span class="number">1</span>; p2[<span class="number">0</span>] = <span class="number">1</span>; prime[++prime[<span class="number">0</span>]] = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Max + <span class="number">10</span>; i++)&#123;</span><br><span class="line">        p1[i] = p1[i - <span class="number">1</span>]; p2[i] = p2[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (prime[cnt] &lt;= i)&#123;</span><br><span class="line">            p1[i] = <span class="number">1l</span>l * p1[i] * prime[cnt] % R;</span><br><span class="line">            p2[i] = <span class="number">1l</span>l * p2[i] * (prime[cnt] - <span class="number">1</span>) % R; cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, <span class="number">1l</span>l * p2[m[i]] % R * o[n[i]] % R * ksm(p1[m[i]], R - <span class="number">2</span>) % R);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="数论" scheme="https://ljhedp.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="逆元" scheme="https://ljhedp.github.io/tags/%E9%80%86%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>卡特兰数-洛谷P1044-栈</title>
    <link href="https://ljhedp.github.io/2018/11/11/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0-%E6%B4%9B%E8%B0%B7P1044-%E6%A0%88/"/>
    <id>https://ljhedp.github.io/2018/11/11/卡特兰数-洛谷P1044-栈/</id>
    <published>2018-11-11T13:20:54.000Z</published>
    <updated>2018-11-11T13:21:12.832Z</updated>
    
    <content type="html"><![CDATA[<p></p><h2>题目</h2><br>给定整数n，求卡特兰数的第n项。<p></p><p></p><h2>分析</h2><br>利用杨辉三角性质打表算出组合数即可计算。<p></p><p></p><h2>代码分享</h2><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//Catalan数：求C(2n,n)/n+1</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">100</span>][<span class="number">100</span>],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>]=a[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">2</span>;i&lt;=<span class="number">2</span>*n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=<span class="number">1</span>;j&lt;=i+<span class="number">1</span>;j++)&#123;</span><br><span class="line">a[i][j]=a[i<span class="number">-1</span>][j]+a[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line"><span class="comment">//printf("%d ",a[i][j]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("\n");</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=a[<span class="number">2</span>*n][n+<span class="number">1</span>]/(n+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h2&gt;题目&lt;/h2&gt;&lt;br&gt;给定整数n，求卡特兰数的第n项。&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;分析&lt;/h2&gt;&lt;br&gt;利用杨辉三角性质打表算出组合数即可计算。&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;代码分享&lt;/h2&gt;&lt;br&gt;&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="信息学竞赛(OI)" scheme="https://ljhedp.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B-OI/"/>
    
    
      <category term="数论" scheme="https://ljhedp.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="组合数学" scheme="https://ljhedp.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="杨辉三角" scheme="https://ljhedp.github.io/tags/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
    
      <category term="卡特兰数" scheme="https://ljhedp.github.io/tags/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"/>
    
  </entry>
  
</feed>
